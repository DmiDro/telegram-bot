import os
from dotenv import load_dotenv  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dotenv
import openai
import logging
import asyncio
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from xgboost import XGBRegressor  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç XGBRegressor

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("API_KEY")
telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
chat_id = 522869453  # üîπ –£–∫–∞–∂–∏ ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=telegram_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
popular_tickers = popular_tickers = {
    "AAPL": "üçè Apple",
    "AMZN": "üì¶ Amazon",
    "GOOGL": "üåç Google",
    "MSFT": "üíª Microsoft",
    "META": "üì± Meta",
    "NVDA": "üéÆ Nvidia",
    "PG": "üè† P&G",
}

async def safe_request(func, *args, retries=3, **kwargs):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram API –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏"""
    for _ in range(retries):
        try:
            return await func(*args, **kwargs)
        except aiohttp.ClientConnectionError:
            logging.warning("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            await asyncio.sleep(3)
    return None

async def get_stock_price(ticker):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Yahoo Finance"""
    try:
        stock = yf.Ticker(ticker)
        price_data = stock.history(period="1d")

        if price_data.empty:
            return f"‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"

        return round(price_data["Close"].iloc[-1], 2)

    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"

async def plot_stock_chart(ticker):
    """–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤"""
    stock = yf.Ticker(ticker)
    data = stock.history(period="6mo")

    if data.empty:
        return None

    plt.figure(figsize=(10, 5))
    plt.plot(data.index, data["Close"], label=f"{ticker} –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è", color="blue")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞ (USD)")
    plt.title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω {ticker}")
    plt.legend()
    plt.grid()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"{ticker}_chart.png"
    plt.savefig(filename, format="png")
    plt.close()

    return filename

async def train_xgboost_model(ticker):
    """–û–±—É—á–∞–µ–º XGBoost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω"""
    stock = yf.Ticker(ticker)
    data = stock.history(period="1y")

    if data.empty:
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}!"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data["Return"] = data["Close"].pct_change().fillna(0)
    X = np.array(range(len(data))).reshape(-1, 1)
    y = data["Close"].values

    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model = XGBRegressor(n_estimators=100, learning_rate=0.1)
    model.fit(X, y)

    return model

async def predict_xgboost_price(ticker, days=30):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ —Å XGBoost"""
    model = await train_xgboost_model(ticker)

    if isinstance(model, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        return model

    future_days = np.array(range(len(model.feature_importances_), len(model.feature_importances_) + days)).reshape(-1, 1)
    predictions = model.predict(future_days)

    return round(predictions[-1], 2)

async def analyze_stock(ticker):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É GPT-4 –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ü–∏–π"""
    price = await get_stock_price(ticker)

    if isinstance(price, str) and "–û—à–∏–±–∫–∞" in price:
        return price

    client = openai.OpenAI(api_key=api_key)
    prompt = f"–¶–µ–Ω–∞ –∞–∫—Ü–∏–π {ticker} —Å–µ–π—á–∞—Å ${price}. –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–æ—Å—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–π?"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content

def get_stock_buttons():
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=ticker)]
            for ticker, name in popular_tickers.items()
        ]
    )
    return keyboard


@dp.message(Command("start"))
async def start_command(message: Message):
    await safe_request(message.answer, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:", reply_markup=get_stock_buttons())

@dp.callback_query()
async def handle_button_click(callback_query: types.CallbackQuery):
    ticker = callback_query.data
    await safe_request(callback_query.message.answer, f"üìä –í—ã –≤—ã–±—Ä–∞–ª–∏ {ticker}")
    await send_stock_analysis(callback_query.message, ticker)

@dp.message()
async def send_stock_analysis(message: Message, ticker=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É, –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–≥–Ω–æ–∑ –∏ –≥—Ä–∞—Ñ–∏–∫"""
    if not ticker:
        ticker = message.text.upper().strip()

    price = await get_stock_price(ticker)
    if isinstance(price, str) and "–û—à–∏–±–∫–∞" in price:
        await safe_request(message.answer, price)
        return

    analysis = await analyze_stock(ticker)
    prediction = await predict_xgboost_price(ticker, days=30)
    chart = await plot_stock_chart(ticker)

    await safe_request(
        message.answer,
        f"üìä <b>{ticker}</b>\nüìà –¶–µ–Ω–∞: <b>${price}</b>\n\nüßê –ê–Ω–∞–ª–∏–∑:\n{analysis}\n\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑ XGBoost: ${prediction}"
    )

    if chart:
        chart_file = FSInputFile(chart)
        await safe_request(message.answer_photo, chart_file)

scheduler = AsyncIOScheduler()

async def check_price_changes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    for ticker in popular_tickers:
        price_now = await get_stock_price(ticker)
        if isinstance(price_now, str):
            continue

        stock = yf.Ticker(ticker)
        price_old = stock.history(period="5d")["Close"].iloc[-2]

        change = ((price_now - price_old) / price_old) * 100
        if abs(change) > 5:
            msg = f"‚ö† <b>{ticker}</b> –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {round(change, 2)}%\nüìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price_now}"
            await safe_request(bot.send_message, chat_id=123456789, text=msg)

scheduler.add_job(check_price_changes, "interval", minutes=30)

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    scheduler.start()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
