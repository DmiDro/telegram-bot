import os
import requests
import logging
import asyncio
from random import choice
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not TELEGRAM_BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ WEATHER_API_KEY!")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

CITY_NAME = "–ó–∞—è–Ω—å–µ"
LAT = 58.779
LON = 28.626

# --- –ü–æ–≥–æ–¥–∞ ---
def get_weather(hours_ahead=0):
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={LAT},{LON}&hours=24&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()

        if "error" in data:
            return "–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."

        current = data["current"]
        forecast = data["forecast"]["forecastday"][0]["hour"]

        if hours_ahead == 0:
            selected_weather = current
            time_label = "–°–µ–π—á–∞—Å"
        else:
            selected_weather = next((h for h in forecast if h["time"].endswith(f"{hours_ahead:02d}:00")), current)
            time_label = f"–ß–µ—Ä–µ–∑ {hours_ahead} —á–∞—Å–æ–≤" if hours_ahead != 24 else "–ó–∞–≤—Ç—Ä–∞"

        temp = selected_weather["temp_c"]
        condition = selected_weather["condition"]["text"]
        wind_speed = selected_weather["wind_kph"]
        humidity = selected_weather["humidity"]

        return (
            f"\U0001F324 –ü–æ–≥–æ–¥–∞ –≤ <b>{CITY_NAME}</b>\n"
            f"\U0001F552 –í—Ä–µ–º—è: <b>{time_label}</b>\n"
            f"\U0001F321 –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b>\n"
            f"\U0001F4A8 –í–µ—Ç–µ—Ä: <b>{wind_speed} –∫–º/—á</b>\n"
            f"\U0001F4A7 –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n"
            f"\U0001F30D –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{condition}</b>"
        )
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="\U0001F324 –ü–æ–≥–æ–¥–∞", callback_data="weather_menu")],
        [InlineKeyboardButton(text="\U0001F3AE –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data="rps_game")],
        [InlineKeyboardButton(text="\U0001F4CD –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="send_location")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def weather_keyboard():
    buttons = [
        [InlineKeyboardButton(text="\U0001F324 –°–µ–π—á–∞—Å", callback_data="weather_now")],
        [InlineKeyboardButton(text="‚è≥ –ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", callback_data="weather_6h")],
        [InlineKeyboardButton(text="\U0001F319 –ù–æ—á—å—é", callback_data="weather_night")],
        [InlineKeyboardButton(text="‚òÄ –ó–∞–≤—Ç—Ä–∞", callback_data="weather_tomorrow")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

@dp.callback_query()
async def handle_callbacks(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "weather_menu":
        await callback_query.message.edit_text("\U0001F324 –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=weather_keyboard())

    elif data.startswith("weather_"):
        hours = {"weather_now": 0, "weather_6h": 6, "weather_night": 22, "weather_tomorrow": 24}.get(data, 0)
        weather_info = get_weather(hours)
        await callback_query.message.edit_text(weather_info, reply_markup=weather_keyboard())

    elif data == "rps_game":
        rps_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="rps_rock")],
            [InlineKeyboardButton(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors")],
            [InlineKeyboardButton(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="rps_paper")],
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Å—Ç:", reply_markup=rps_keyboard)

    elif data.startswith("rps_"):
        options = {
            "rps_rock": "ü™® –ö–∞–º–µ–Ω—å",
            "rps_scissors": "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã",
            "rps_paper": "üìÑ –ë—É–º–∞–≥–∞",
        }
        user_choice = options[data]
        bot_choice_key = choice(list(options.keys()))
        bot_choice = options[bot_choice_key]

        result = determine_rps_result(data, bot_choice_key)
        await callback_query.message.edit_text(
            f"–í—ã: {user_choice}\n–ë–æ—Ç: {bot_choice}\n\n<b>{result}</b>",
            reply_markup=main_menu_keyboard()
        )

    elif data == "send_location":
        await callback_query.message.answer_location(latitude=LAT, longitude=LON)

# --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---
def determine_rps_result(user, bot):
    if user == bot:
        return "–ù–∏—á—å—è!"
    wins = {
        "rps_rock": "rps_scissors",
        "rps_scissors": "rps_paper",
        "rps_paper": "rps_rock"
    }
    return "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ" if wins[user] == bot else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢"

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
