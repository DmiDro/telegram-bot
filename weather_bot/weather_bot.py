import os
import requests
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # API-–∫–ª—é—á –ø–æ–≥–æ–¥—ã

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –µ—Å—Ç—å
if not TELEGRAM_BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ WEATHER_API_KEY!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üìç –õ–æ–∫–∞—Ü–∏—è –ó–∞—è–Ω—å–µ
CITY_NAME = "–ó–∞—è–Ω—å–µ"
LAT = 55.789  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞
LON = 49.122  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather(hours_ahead=0):
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={LAT},{LON}&hours=24&lang=ru"
    
    try:
        response = requests.get(url)
        data = response.json()

        if "error" in data:
            return "–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."

        current = data["current"]
        forecast = data["forecast"]["forecastday"][0]["hour"]

        if hours_ahead == 0:
            selected_weather = current
            time_label = "–°–µ–π—á–∞—Å"
        else:
            selected_weather = next((h for h in forecast if h["time"].endswith(f"{hours_ahead:02d}:00")), current)
            time_label = f"–ß–µ—Ä–µ–∑ {hours_ahead} —á–∞—Å–æ–≤" if hours_ahead != 24 else "–ó–∞–≤—Ç—Ä–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        temp = selected_weather["temp_c"]
        condition = selected_weather["condition"]["text"]
        wind_speed = selected_weather["wind_kph"]
        humidity = selected_weather["humidity"]

        return (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ <b>{CITY_NAME}</b>\n"
            f"üïí –í—Ä–µ–º—è: <b>{time_label}</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b>\n"
            f"üí® –í–µ—Ç–µ—Ä: <b>{wind_speed} –∫–º/—á</b>\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n"
            f"üåç –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{condition}</b>"
        )
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def weather_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üå§ –°–µ–π—á–∞—Å", callback_data="weather_now")],
        [InlineKeyboardButton(text="‚è≥ –ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", callback_data="weather_6h")],
        [InlineKeyboardButton(text="üåô –ù–æ—á—å—é", callback_data="weather_night")],
        [InlineKeyboardButton(text="‚òÄ –ó–∞–≤—Ç—Ä–∞", callback_data="weather_tomorrow")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚òÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ø–æ–≥–æ–¥—É –≤ –ó–∞—è–Ω—å–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=weather_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_weather_buttons(callback_query: types.CallbackQuery):
    if callback_query.data == "weather_now":
        weather_info = get_weather(0)
    elif callback_query.data == "weather_6h":
        weather_info = get_weather(6)
    elif callback_query.data == "weather_night":
        weather_info = get_weather(22)
    elif callback_query.data == "weather_tomorrow":
        weather_info = get_weather(24)
    else:
        weather_info = "‚ö† –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫."

    await callback_query.message.edit_text(weather_info, reply_markup=weather_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
