# üìÑ test_bot_full/handlers/results/results_main.py

import logging
from aiogram import Router, types
from aiogram.exceptions import TelegramBadRequest

from utils.keyboards import menu_keyboard
from handlers.results.interpreters import interpret_results
from db.write import write_result_to_db, update_subscription_status
from db.descriptions import get_result_description_from_db
from handlers.start import user_menu_messages
from handlers.results.message_state import result_messages


router = Router()

def format_result_output(test_key: str, data: dict) -> str:
    def indent(text):
        return f"<i>{' ' * 5}{text}</i>"

    if test_key == "socionics":
        name = f"<b>{data.get('name', '')}</b>"
        summary = data.get("summary", "").replace("\n", " ")
        description = data.get("description", "").replace("\n", " ")
        return f"{name}\n\n{indent(summary)}\n\n{indent(description)}"
    else:
        title = f"<b>{data.get('title', '')}</b>"
        description = data.get("description", "").replace("\n", " ")
        return f"{title}\n\n{indent(description)}"


async def finish_test(message: types.Message, user_id: int, user: types.User, user_answers: dict):
    test_key = user_answers[user_id]["test"]
    answers = user_answers[user_id]["answers"]

    logging.info(f"[RESULT] –ó–∞–≤–µ—Ä—à—ë–Ω —Ç–µ—Å—Ç: {test_key} ‚Äî –û—Ç–≤–µ—Ç—ã: {answers}")

    result = interpret_results(test_key, answers, {})
    logging.info(f"[RESULT] –ü–æ–¥—Å—á–∏—Ç–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    description_data = await get_result_description_from_db(test_key, result)
    logging.info(f"[RESULT] –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ: {bool(description_data)}")

    if not description_data:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = format_result_output(test_key, description_data)

    existing_result_message = result_messages.get(user_id, {}).get(test_key)

    if existing_result_message:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=existing_result_message,
                text=text,
                parse_mode="HTML"
            )
            logging.info(f"[RESULT] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")
            sent = await message.answer(text, parse_mode="HTML")
            result_messages.setdefault(user_id, {})[test_key] = sent.message_id
    else:
        sent = await message.answer(text, parse_mode="HTML")
        result_messages.setdefault(user_id, {})[test_key] = sent.message_id
        logging.info(f"[RESULT] –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if user_id not in bot_results:
        bot_results[user_id] = {}
    bot_results[user_id][test_key] = result

    await write_result_to_db(
        user_id=user_id,
        username=user.full_name,
        bot_results=bot_results,
        test_key=test_key
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    keyboard = await menu_keyboard(user_id)

    if not keyboard.inline_keyboard:  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç
        text = (
            "üéâ <b>–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —Ç–µ—Å—Ç—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç–µ–±—è –∂–¥—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –≤–µ–ª–∏–∫–∏—Ö –≥–µ—Ä–æ–µ–≤. "
            "–ü—Ä–æ–≤–µ—Ä—å –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º ‚Äî –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è."
        )
    else:
        text = "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç:"

    
    if user_id in user_menu_messages:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=user_menu_messages[user_id],
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logging.info(f"[RESULT] –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: {e}")

    sent = await message.answer(text, reply_markup=keyboard)
    user_menu_messages[user_id] = sent.message_id
    logging.info(f"[RESULT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
