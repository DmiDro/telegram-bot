import random
import logging
import httpx
from db import get_hero_list

# üåê URL FastAPI-–ø—Ä–æ–∫—Å–∏ (–ø–æ—Ä—Ç 8000 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω)
PROXY_URL = "http://45.155.102.141:8000/chat"

# üì¶ HTTP-–∫–ª–∏–µ–Ω—Ç
http_client = httpx.AsyncClient(timeout=httpx.Timeout(30.0))

async def generate_daily_recommendation(user_id: str, archetype: str = "", maturity: str = "", socionics: str = "") -> str:
    logging.info(f"üöÄ [gpt] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–∞–Ω–∏—è –¥–ª—è user_id: {user_id}")

    heroes = await get_hero_list()
    if not heroes:
        logging.warning("‚ö†Ô∏è [gpt] –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î")
        return "‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    logging.info(f"‚úÖ [gpt] –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(heroes)} –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã.")

    char = random.choice(heroes)
    name = char["name"]
    description = char["description"]
    link = char.get("link", "")
    signature_html = f'<a href="{link}">{name}</a>' if link else name

    prompt = f"""
–¢—ã ‚Äî {name}. –¢–≤–æ—è —Å—É—Ç—å: {description}.
–¢—ã –¥–∞—ë—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º —Å —Ç–∞–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å–ª–æ–≤–æ "—Ç–µ—Å—Ç", "–∞—Ä—Ö–µ—Ç–∏–ø", ID –∏–ª–∏ —Ü–∏—Ñ—Ä—ã. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏. –ü—Ä–æ—Å—Ç–æ –¥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
–ê—Ä—Ö–µ—Ç–∏–ø: {archetype or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å: {maturity or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"}
–°–æ—Ü–∏–æ–Ω–∏–∫–∞: {socionics or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"}

–°—Ç–∏–ª—å: –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω—ã–π, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å —é–º–æ—Ä–æ–º, —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –Ω–∞ –¥–µ–Ω—å. –û–±—ä—ë–º ‚Äî 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä–Ω–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –û—Å–æ–±–µ–Ω–Ω–æ –¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞, —Å–æ—Ü–∏–æ–Ω–∏–∫–∏. –û–±—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–µ–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –≥–µ–Ω–¥–µ—Ä—É. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å —Å–ª–æ–≤–æ "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", –∏–∑–±–µ–≥–∞–π —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–∏.
""".strip()

    try:
        logging.info(f"üì§ [gpt] –û—Ç–ø—Ä–∞–≤–∫–∞ prompt —á–µ—Ä–µ–∑ FastAPI-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –≥–µ—Ä–æ—è: {name}")
        response = await http_client.post(PROXY_URL, json={"prompt": prompt})
        response.raise_for_status()

        data = await response.json()  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        advice = data.get("result") or data.get("message") or data
        if isinstance(advice, dict):
            advice = str(advice)

        advice = advice.strip()
        logging.info(f"üñçÔ∏è [gpt] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FastAPI-–ø—Ä–æ–∫—Å–∏:\n{advice}")

    except Exception as e:
        logging.error(f"‚ùå [gpt] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏: {e}")
        advice = "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ –Ω–µ–≥–æ. –î–µ–ª–∞–π –≤—ã–±–æ—Ä ‚Äî –æ–Ω —Ç–≤–æ–π."
        logging.info("üìé [gpt] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –ø–æ –æ—à–∏–±–∫–µ.")

    return (
        f"üïä <b>–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"{advice}\n\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, {signature_html}\n"
        f"<i>{description}</i>"
    )
