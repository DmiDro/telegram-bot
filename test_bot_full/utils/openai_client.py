import os
import logging
import asyncio
import httpx

# –ê–¥—Ä–µ—Å FastAPI-–ø—Ä–æ–∫—Å–∏
PROXY_ENDPOINT = os.getenv("GPT_PROXY_ENDPOINT", "http://45.155.102.141:8000/chat")

# HTTP-–∫–ª–∏–µ–Ω—Ç
http_client = httpx.AsyncClient(timeout=httpx.Timeout(30.0))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def generate_response(prompt: str, model: str = "gpt-4o") -> str:
    prompt_id = prompt.strip()[:60]
    try:
        logging.info(f"üì§ FastAPI-–ø—Ä–æ–∫—Å–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ prompt ({prompt_id})")
        response = await http_client.post(
            PROXY_ENDPOINT,
            json={
                "model": model,
                "messages": [{"role": "user", "content": prompt.strip()}]
            }
        )
        response.raise_for_status()
        data = response.json()
        return data.get("result", "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç.").strip()

    except Exception as e:
        logging.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ FastAPI-–ø—Ä–æ–∫—Å–∏: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT-–ø—Ä–æ–∫—Å–∏."
