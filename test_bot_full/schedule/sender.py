import logging
import time
from datetime import datetime

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone

from utils.gpt import generate_daily_recommendation
from db.write import get_subscribed_users


def setup_scheduler(bot: Bot):
    logging.info("üü° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

    tz_istanbul = timezone("Europe/Istanbul")

    logging.info(f"üï∞Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ UTC –≤—Ä–µ–º—è: {datetime.utcnow()}")
    logging.info(f"üï∞Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (Europe/Istanbul): {datetime.now(tz_istanbul)}")
    logging.info(f"üï∞Ô∏è time.time(): {time.time()}")

    scheduler = AsyncIOScheduler(timezone=tz_istanbul)

    async def send_recommendations():
        now = datetime.now(tz_istanbul).strftime("%Y-%m-%d %H:%M:%S")
        logging.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ {now} (Europe/Istanbul)")

        try:
            users = await get_subscribed_users()
            logging.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return


        for user_id in users:
            try:
                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
                recommendation = await generate_daily_recommendation(user_id)

                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üëç", callback_data="feedback_like"),
                    InlineKeyboardButton(text="üëé", callback_data="feedback_dislike"),
                ]])

                await bot.send_message(
                    user_id,
                    recommendation,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )

                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")

            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

    try:
        scheduler.add_job(
            send_recommendations,
            CronTrigger(hour=2, minute=38, timezone=tz_istanbul),
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"
        )
        logging.info("üìå –ó–∞–¥–∞—á–∞ send_recommendations –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
