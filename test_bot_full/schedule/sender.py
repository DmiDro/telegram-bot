from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone
from datetime import datetime
import time
import logging

from utils.gpt import generate_daily_recommendation
from db.write import get_subscribed_users
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def setup_scheduler(bot: Bot):
    logging.info("üü° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

    tz_istanbul = timezone("Europe/Istanbul")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logging.info(f"üï∞Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ UTC –≤—Ä–µ–º—è: {datetime.utcnow()}")
    logging.info(f"üï∞Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (Europe/Istanbul): {datetime.now(tz_istanbul)}")
    logging.info(f"üï∞Ô∏è time.time(): {time.time()}")

    scheduler = AsyncIOScheduler(timezone=tz_istanbul)

    @scheduler.scheduled_job(
        CronTrigger(hour=17, minute=50, timezone=tz_istanbul)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É!
    )
    async def send_recommendations():
        now = datetime.now(tz_istanbul).strftime("%Y-%m-%d %H:%M:%S")
        logging.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ {now} (Europe/Istanbul)")

        users = await get_subscribed_users()
        logging.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}")

        for user_id in users:
            try:
                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
                recommendation = await generate_daily_recommendation(user_id)

                keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
                    InlineKeyboardButton(text="üëç", callback_data="feedback_like"),
                    InlineKeyboardButton(text="üëé", callback_data="feedback_dislike"),
                ]])

                await bot.send_message(
                    user_id,
                    recommendation,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )

                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")

            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (Europe/Istanbul)")
